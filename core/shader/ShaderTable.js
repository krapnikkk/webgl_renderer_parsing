var ShaderTable = {
    "alphaprepassfrag.glsl": "precision mediump float;\n#include <matdither.glsl>\nuniform sampler2D tAlbedo;varying mediump vec2 d;void main(){float e=texture2D(tAlbedo,d).a;if(e<=f(d.x)){discard;}gl_FragColor=vec4(0.0);}",
    "alphaprepassvert.glsl": "precision highp float;uniform mat4 uModelViewProjectionMatrix;uniform vec2 uUVOffset;attribute vec3 vPosition;attribute vec2 vTexCoord;varying mediump vec2 d;vec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}void main(void){gl_Position=h(uModelViewProjectionMatrix,vPosition.xyz);d=vTexCoord+uUVOffset;}",
    "bloom.glsl": "precision mediump float;uniform sampler2D tInput;uniform vec4 uKernel[BLOOM_SAMPLES];varying highp vec2 j;void main(void){vec3 c=vec3(0.0,0.0,0.0);for(int k=0;k<BLOOM_SAMPLES;++k){vec3 l=uKernel[k].xyz;vec3 m=texture2D(tInput,j+l.xy).xyz;m=max(m,vec3(0.0,0.0,0.0));c+=m*l.z;}gl_FragColor.xyz=c;gl_FragColor.w=0.0;}",
    "bloomshrink.glsl": "precision highp float;uniform sampler2D tInput;varying highp vec2 j;void main(void){float o=0.25/256.0;gl_FragColor=0.25*(texture2D(tInput,j+vec2(o,o))+texture2D(tInput,j+vec2(o,-o))+texture2D(tInput,j+vec2(-o,o))+texture2D(tInput,j+vec2(-o,-o)));}",
    "fogfrag.glsl": "precision highp float;uniform sampler2D tDepth;uniform vec3 uDepthToZ;uniform vec4 uUnproject;uniform mat4 uInvViewMatrix;uniform float uFogInvDistance;uniform float uFogOpacity;uniform float uFogDispersion;uniform vec3 uFogType;uniform vec3 uFogColor;uniform float uFogIllum;uniform mat4 uLightMatrix;\n#ifdef FOG_IBL\nuniform vec4 uFogLightSphere[9];\n#else\nuniform vec4 uSpotParams;uniform vec4 uLightPosition;uniform vec3 uLightColor;uniform vec4 uLightAttenuation;\n#ifdef FOG_SHADOWS\nuniform mat4 uShadowProj;uniform sampler2D uShadowMap;uniform float uDitherOffset;uniform vec4 uCylinder;\n#endif\n#endif\nvec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}vec3 u(mat4 i,vec3 v){return i[0].xyz*v.x+i[1].xyz*v.y+i[2].xyz*v.z;}float A(float B){B*=uFogInvDistance;float C=uFogType.x*min(B,1.0)+(uFogType.y-uFogType.y/(1.0+16.0*B*B))+(uFogType.z-uFogType.z*exp(-3.0*B));return C*uFogOpacity;}\n#ifdef FOG_SHADOWS\nfloat D(vec3 E){vec4 p=h(uShadowProj,E);vec3 F=p.xyz/p.w;vec4 G=texture2D(uShadowMap,F.xy);float H=(G.x+G.y*(1.0/255.0))+G.z*(1.0/65025.0);return F.z<H || H>=1.0?1.0:0.0;}float f(vec2 I){return fract(sin(dot(I,vec2(12.9898,78.233)))*43758.5453+uDitherOffset);}void J(vec3 K,vec3 L,out float M,out float N){vec3 v=uSpotParams.xyz,p=uCylinder.xyz;vec3 O=L-dot(L,v)*v;vec3 P=(K-p)-dot(K-p,v)*v;float a=dot(O,O);float b=2.0*dot(O,P);float c=dot(P,P)-uCylinder.w;float Q=b*b-4.0*a*c;if(Q>=0.0){Q=sqrt(Q);M=(-b-Q)/(2.0*a);N=(-b+Q)/(2.0*a);}else {M=N=0.0;}}\n#endif\nvarying vec2 j;void main(void){vec3 R=uInvViewMatrix[3].xyz;float H=texture2D(tDepth,j).x;H=min(H,0.9999);vec3 S;S.z=uDepthToZ.y/(uDepthToZ.z*H+uDepthToZ.x);S.xy=S.z*(j*uUnproject.xy+uUnproject.zw);S=h(uInvViewMatrix,S).xyz;vec3 T;T.xy=(j*uUnproject.xy+uUnproject.zw);T.z=1.0;T=normalize(u(uInvViewMatrix,-T).xyz);vec3 U=uFogColor;\n#if defined(FOG_IBL)\nvec3 G=u(uLightMatrix,T);vec3 V=uFogLightSphere[0].xyz;V+=uFogLightSphere[1].xyz*G.y;V+=uFogLightSphere[2].xyz*G.z;V+=uFogLightSphere[3].xyz*G.x;vec3 swz=G.yyz*G.xzx;V+=uFogLightSphere[4].xyz*swz.x;V+=uFogLightSphere[5].xyz*swz.y;V+=uFogLightSphere[7].xyz*swz.z;vec3 sqr=G*G;V+=uFogLightSphere[6].xyz*(3.0*sqr.z-1.0);V+=uFogLightSphere[8].xyz*(sqr.x-sqr.y);U=mix(U,U*V,uFogIllum);float C=A(length(S-R));gl_FragColor.xyz=U*C;gl_FragColor.w=C;return;\n#else\n#if defined(FOG_SPOT) || defined(FOG_OMNI)\nfloat W=0.0,X=0.0;{float r=1.0/(uLightAttenuation.z);float a=1.0;float b=2.0*dot(T,R-uLightPosition.xyz);float c=dot(uLightPosition.xyz,uLightPosition.xyz)+dot(R,R)+-2.0*dot(uLightPosition.xyz,R)+-r*r;float Q=b*b-4.0*a*c;if(Q>=0.0){Q=sqrt(Q);W=(-b-Q)/(2.0*a);X=(-b+Q)/(2.0*a);}}\n#if defined(FOG_SPOT)\n{float Y=uSpotParams.w,Z=1.0-Y;vec3 v=T;vec3 dc=uSpotParams.xyz;vec3 dd=R-uLightPosition.xyz;vec3 de=v-dot(v,dc)*dc,df=dd-dot(dd,dc)*dc;float a=Y*dot(de,de)-Z*dot(v,dc)*dot(v,dc);float b=2.0*Y*dot(de,df)-2.0*Z*dot(v,dc)*dot(dd,dc);float c=Y*dot(df,df)-Z*dot(dd,dc)*dot(dd,dc);float Q=b*b-4.0*a*c;if(Q>=0.0){float dh=(-b-sqrt(Q))/(2.0*a);float di=(-b+sqrt(Q))/(2.0*a);if(di<dh){float de=dh;dh=di;di=de;}bool dj=dot(-uLightPosition.xyz+R+T*dh,uSpotParams.xyz)<=0.0;bool dk=dot(-uLightPosition.xyz+R+T*di,uSpotParams.xyz)<=0.0;if(!dj ||!dk){if(dj){dh=di;di=X;}else if(dk){di=dh;dh=W;}W=max(W,dh);X=min(X,di);}else {X=W=0.0;}}else {X=W=0.0;}}\n#endif\nfloat tx=dot(T,S-R);W=clamp(W,0.0,tx);X=clamp(X,0.0,tx);float dl=0.0;if(X>W){\n#ifdef FOG_SHADOWS\n#ifdef MOBILE\n#define SAMPLES 16\n#else\n#define SAMPLES 32\n#endif\nfloat dm=f(j)*(X-W)/float(SAMPLES-2);\n#else\n#define SAMPLES 8\nfloat dm=0.0;\n#endif\nfor(int k=0;k<SAMPLES;++k){float t=W+(X-W)*float(k)/float(SAMPLES-1);vec3 p=R+(t+dm)*T;\n#ifdef NEW_ATTENUATION\nfloat a=1.0/dot(p-uLightPosition.xyz,p-uLightPosition.xyz);\n#else\nfloat a=clamp(length(p-uLightPosition.xyz)*uLightAttenuation.z,0.0,1.0);a=1.0+uLightAttenuation.x*a+uLightAttenuation.y*a*a;\n#endif\n#ifdef FOG_SHADOWS\na*=D(p);\n#endif\ndl+=a-a*A(t);}dl*=1.0/float(SAMPLES);\n#ifndef NEW_ATTENUATION\ndl*=(X-W)*uLightAttenuation.z;\n#endif\ndl*=A(X-W);}U*=dl*uFogIllum;\n#elif defined(FOG_DIR)\nfloat C=A(dot(T,S-R));\n#ifdef FOG_SHADOWS\nfloat W,X;J(R,T,W,X);float tx=dot(T,S-R);W=clamp(W,0.0,tx);X=clamp(X,0.0,tx);if(X>W){\n#ifdef MOBILE\n#define SAMPLES 16\n#else\n#define SAMPLES 32\n#endif\nfloat dl=0.0;float dm=f(j)*(X-W)/float(SAMPLES-2);float dn=(X-W)*(1.0/float(SAMPLES));for(int k=0;k<SAMPLES;++k){float t=W+float(k)*dn+dm;vec3 p=R+t*T;float s=D(p);C-=(1.0-s)*(A(t+dn)-A(t));}}\n#endif\nfloat du=0.5+0.5*dot(T,-uSpotParams.xyz);du=1.0+uFogDispersion*(2.0*du*du-1.0);U*=(0.1*C)*(du*uFogIllum);\n#endif\ngl_FragColor.xyz=U*uLightColor;gl_FragColor.w=0.0;\n#endif\n}",
    "fogvert.glsl": "precision highp float;attribute vec2 vCoord;varying vec2 j;void main(void){j=vCoord;gl_Position.xy=2.0*vCoord-vec2(1.0,1.0);gl_Position.zw=vec2(0.0,1.0);}",
    "matdither.glsl": "float f(highp float I){highp float G=0.5*fract(gl_FragCoord.x*0.5)+0.5*fract(gl_FragCoord.y*0.5);return 0.4+0.6*fract(G+3.141592e6*I);}",
    "matfrag.glsl": "\n#extension GL_OES_standard_derivatives : enable\nprecision mediump float;varying highp vec3 dv;varying mediump vec2 d;varying mediump vec3 dA;varying mediump vec3 dB;varying mediump vec3 dC;\n#ifdef VERTEX_COLOR\nvarying lowp vec4 dD;\n#endif\n#ifdef TEXCOORD_SECONDARY\nvarying mediump vec2 dE;\n#endif\nuniform sampler2D tAlbedo;uniform sampler2D tReflectivity;uniform sampler2D tNormal;uniform sampler2D tExtras;uniform sampler2D tSkySpecular;\n#ifdef REFRACTION\nuniform sampler2D tRefraction;\n#endif\nuniform vec4 uDiffuseCoefficients[9];uniform vec3 uCameraPosition;uniform float uAlphaTest;uniform vec3 uFresnel;uniform float uHorizonOcclude;uniform float uHorizonSmoothing;\n#ifdef EMISSIVE\nuniform float uEmissiveScale;uniform vec4 uTexRangeEmissive;\n#endif\n#ifdef AMBIENT_OCCLUSION\nuniform vec4 uTexRangeAO;\n#endif\n#ifdef REFRACTION\nuniform float uRefractionIOREntry;uniform float uRefractionRayDistance;uniform vec3 uRefractionTint;uniform float uRefractionAlbedoTint;uniform mat4 uRefractionViewProjection;uniform vec4 uTexRangeRefraction;\n#endif\n#ifdef LIGHT_COUNT\nuniform vec4 uLightPositions[LIGHT_COUNT];uniform vec3 uLightDirections[LIGHT_COUNT];uniform vec3 uLightColors[LIGHT_COUNT];\n#ifndef NEW_ATTENUATION\nuniform vec3 uLightParams[LIGHT_COUNT];\n#endif\nuniform vec3 uLightSpot[LIGHT_COUNT];\n#endif\n#ifdef ANISO\nuniform float uAnisoStrength;uniform vec3 uAnisoTangent;uniform float uAnisoIntegral;uniform vec4 uTexRangeAniso;\n#endif\n#define saturate(x) clamp( x, 0.0, 1.0 )\n#include <matsampling.glsl>\n#include <matlighting.glsl>\n#include <matshadows.glsl>\n#include <matskin.glsl>\n#include <matmicrofiber.glsl>\n#include <matstrips.glsl>\n#ifdef TRANSPARENCY_DITHER\n#include <matdither.glsl>\n#endif\nvoid main(void){vec4 m=texture2D(tAlbedo,d);vec3 dF=dG(m.xyz);float e=m.w;\n#ifdef VERTEX_COLOR\n{vec3 dH=dD.xyz;\n#ifdef VERTEX_COLOR_SRGB\ndH=dH*(dH*(dH*0.305306011+vec3(0.682171111))+vec3(0.012522878));\n#endif\ndF*=dH;\n#ifdef VERTEX_COLOR_ALPHA\ne*=dD.w;\n#endif\n}\n#endif\n#ifdef ALPHA_TEST\nif(e<uAlphaTest){discard;}\n#endif\n#ifdef TRANSPARENCY_DITHER\ne=(e>f(d.x))?1.0:e;\n#endif\nvec3 dI=dJ(texture2D(tNormal,d).xyz);\n#ifdef ANISO\n#ifdef ANISO_NO_DIR_TEX\nvec3 dK=dL(uAnisoTangent);\n#else\nm=dM(d,uTexRangeAniso);vec3 dK=2.0*m.xyz-vec3(1.0);dK=dL(dK);\n#endif\ndK=dK-dI*dot(dK,dI);dK=normalize(dK);vec3 dN=dK*uAnisoStrength;\n#endif\nvec3 dO=normalize(uCameraPosition-dv);m=texture2D(tReflectivity,d);vec3 dP=dG(m.xyz);float dQ=m.w;float dR=dQ;\n#ifdef HORIZON_SMOOTHING\nfloat dS=dot(dO,dI);dS=uHorizonSmoothing-dS*uHorizonSmoothing;dQ=mix(dQ,1.0,dS*dS);\n#endif\n#ifdef STRIPVIEW\ndT dU;dV(dU,dQ,dP);\n#endif\nfloat dW=1.0;\n#ifdef AMBIENT_OCCLUSION\n#ifdef AMBIENT_OCCLUSION_SECONDARY_UV\ndW=dM(dE,uTexRangeAO).x;\n#else\ndW=dM(d,uTexRangeAO).x;\n#endif\ndW*=dW;\n#endif\n#if defined(SKIN)\ndX dY;dZ(dY);dY.ec*=dW;\n#elif defined(MICROFIBER)\ned ee;ef(ee,dI);ee.eh*=dW;\n#else\nvec3 ei=ej(dI);ei*=dW;\n#endif\nvec3 ek=reflect(-dO,dI);\n#ifdef ANISO\nvec3 rt=ek-(0.5*dN*dot(ek,dK));vec3 el=em(rt,mix(dQ,0.5*dQ,uAnisoStrength));\n#else\nvec3 el=em(ek,dQ);\n#endif\n#ifdef GGX_SPECULAR\n{float en=1.0-dQ;float l=en*0.5;float eo=saturate(dot(dO,dI))*l+(1.0-l);el*=eo*eo;el*=1.0-0.4*en*en;}\n#endif\nel*=eu(ek,dC);\n#ifdef LIGHT_COUNT\n#ifdef GGX_SPECULAR\nfloat ev=1.0-dQ;\n#else\nhighp float eA=10.0/log2(dQ*0.968+0.03);eA*=eA;float eB=eA*(1.0/(8.0*3.1415926))+(4.0/(8.0*3.1415926));eB=min(eB,1.0e3);\n#endif\n#ifdef SHADOW_COUNT\neC eD;\n#ifdef SKIN\n#ifdef SKIN_VERSION_1\neE(eD,SHADOW_KERNEL+SHADOW_KERNEL*dY.eF);\n#else\neG eH;float eI=SHADOW_KERNEL+SHADOW_KERNEL*dY.eF;eJ(eH,eI);eE(eD,eI);\n#endif\n#else\neE(eD,SHADOW_KERNEL);\n#endif\n#endif\n#if defined(ANISO) && !defined(GGX_SPECULAR)\neB*=uAnisoIntegral;\n#endif\nfor(int k=0;k<LIGHT_COUNT;++k){vec3 eK=uLightPositions[k].xyz-dv*uLightPositions[k].w;float eL=inversesqrt(dot(eK,eK));eK*=eL;\n#ifdef NEW_ATTENUATION\nfloat a=eL*eL;\n#else\nfloat a=saturate(uLightParams[k].z/eL);a=1.0+a*(uLightParams[k].x+uLightParams[k].y*a);\n#endif\nfloat s=saturate(dot(eK,uLightDirections[k]));s=saturate(uLightSpot[k].y-uLightSpot[k].z*(1.0-s*s));vec3 eM=(a*s)*uLightColors[k].xyz;\n#if defined(SKIN)\n#ifdef SHADOW_COUNT\n#ifdef SKIN_VERSION_1\neN(dY,eD.eO[k],1.0,eK,dI,eM);\n#else\neN(dY,eD.eO[k],eH.eH[k],eK,dI,eM);\n#endif\n#else\neN(dY,1.0,0.0,eK,dI,eM);\n#endif\n#elif defined(MICROFIBER)\n#ifdef SHADOW_COUNT\neP(ee,eD.eO[k],eK,dI,eM);\n#else\neP(ee,1.0,eK,dI,eM);\n#endif\n#else\nfloat eQ=saturate((1.0/3.1415926)*dot(eK,dI));\n#ifdef SHADOW_COUNT\neQ*=eD.eO[k];\n#endif\nei+=eQ*eM;\n#endif\n#ifdef GGX_SPECULAR\nfloat eR=max(ev*ev,1e-3);float eS=eR*eR;vec3 eT=eK+dO;\n#ifdef ANISO\neT=eT-(dN*dot(eT,dK));\n#endif\neT=normalize(eT);float eU=saturate(dot(dO,dI));float eV=saturate(dot(dI,eT));float eW=saturate(dot(eK,dI));float eX=saturate(dot(dO,eT));float G=(eV*eS-eV)*eV+1.0;float eY=eS/(3.141593*G*G);float l=eR*0.5;float G_SmithL=eW*(1.0-l)+l;float G_SmithV=eU*(1.0-l)+l;float eZ=0.25/(G_SmithL*G_SmithV);float fc=1.0-eW;fc*=fc;fc*=fc;fc=eW-eW*fc;float fd=eY*eZ*fc;\n#ifdef SHADOW_COUNT\nfd*=eD.eO[k];\n#endif\nel+=fd*eM;\n#else\nvec3 eT=eK+dO;\n#ifdef ANISO\neT=eT-(dN*dot(eT,dK));\n#endif\neT=normalize(eT);float fd=eB*pow(saturate(dot(eT,dI)),eA);\n#ifdef SHADOW_COUNT\nfd*=eD.eO[k];\n#endif\nel+=fd*eM;\n#endif\n}\n#endif\n#if defined(SKIN)\nvec3 ei,diff_extra;fe(ei,diff_extra,dY,dO,dI,dQ);\n#elif defined(MICROFIBER)\nvec3 ei,diff_extra;ff(ei,diff_extra,ee,dO,dI,dQ);\n#endif\nvec3 fh=fi(dO,dI,dP,dQ*dQ);el*=fh;\n#ifdef REFRACTION\nvec4 fj;{vec3 G=refract(-dO,dI,uRefractionIOREntry);G=dv+G*uRefractionRayDistance;vec4 fk=uRefractionViewProjection[0]*G.x+(uRefractionViewProjection[1]*G.y+(uRefractionViewProjection[2]*G.z+uRefractionViewProjection[3]));vec2 c=fk.xy/fk.w;c=0.5*c+vec2(0.5,0.5);vec2 i=mod(floor(c),2.0);c=fract(c);c.x=i.x>0.0?1.0-c.x:c.x;c.y=i.y>0.0?1.0-c.y:c.y;fj.rgb=texture2D(tRefraction,c).xyz;fj.rgb=mix(fj.rgb,fj.rgb*dF,uRefractionAlbedoTint);fj.rgb=fj.rgb-fj.rgb*fh;fj.rgb*=uRefractionTint;\n#ifdef REFRACTION_NO_MASK_TEX\nfj.a=1.0;\n#else\nfj.a=dM(d,uTexRangeRefraction).x;\n#endif\n}\n#endif\n#ifdef DIFFUSE_UNLIT\ngl_FragColor.xyz=dF;\n#else\ngl_FragColor.xyz=ei*dF;\n#endif\n#ifdef REFRACTION\ngl_FragColor.xyz=mix(gl_FragColor.xyz,fj.rgb,fj.a);\n#endif\ngl_FragColor.xyz+=el;\n#if defined(SKIN) || defined(MICROFIBER)\ngl_FragColor.xyz+=diff_extra;\n#endif\n#ifdef EMISSIVE\n#ifdef EMISSIVE_SECONDARY_UV\nvec2 fl=dE;\n#else\nvec2 fl=d;\n#endif\ngl_FragColor.xyz+=uEmissiveScale*dG(dM(fl,uTexRangeEmissive).xyz);\n#endif\n#ifdef STRIPVIEW\ngl_FragColor.xyz=fm(dU,dI,dF,dP,dR,ei,el,gl_FragColor.xyz);\n#endif\n#ifdef NOBLEND\ngl_FragColor.w=1.0;\n#else\ngl_FragColor.w=e;\n#endif\n}",
    "matlighting.glsl": "vec3 fn(vec3 fo,float fu){return exp(-0.5*fu/(fo*fo))/(fo*2.5066283);}vec3 fv(vec3 fo){return vec3(1.0,1.0,1.0)/(fo*2.5066283);}vec3 fA(vec3 fB){return vec3(-0.5,-0.5,-0.5)/(fB);}vec3 fC(vec3 fD,float fu){return exp(fD*fu);}\n#define SAMPLE_COUNT 21.0\n#define SAMPLE_HALF 10.0\n#define GAUSS_SPREAD 0.05\nvec3 fE(float fF,float fG,vec3 fH){vec3 fI=vec3(fG,fG,fG);fI=0.8*fI+vec3(0.2);vec3 fJ=cos(fI*3.14159);vec3 fK=cos(fI*3.14159*0.5);fK*=fK;fK*=fK;fK*=fK;fI=fI+0.05*fJ*fK*fH;fK*=fK;fK*=fK;fK*=fK;fI=fI+0.1*fJ*fK*fH;fI=saturate(fI);fI*=fI*1.2;return fI;}vec3 fL(vec3 fH){return vec3(1.0,1.0,1.0)/3.1415926;}float fM(float fF,float fH){return saturate(-fF*fH+fF+fH);}vec3 fN(float fF,vec3 fH){return saturate(-fF*fH+vec3(fF)+fH);}float fO(float fH){return-0.31830988618379*fH+0.31830988618379;}vec3 fP(vec3 fH){return-0.31830988618379*fH+vec3(0.31830988618379);}vec3 fi(vec3 dO,vec3 dI,vec3 dP,float fQ){float C=1.0-saturate(dot(dO,dI));float fR=C*C;C*=fR*fR;C*=fQ;return(dP-C*dP)+C*uFresnel;}vec2 fS(vec2 fT,vec2 fH){fT=1.0-fT;vec2 fU=fT*fT;fU*=fU;fT=mix(fU,fT*0.4,fH);return fT;}vec3 ej(vec3 fV){\n#define c(n) uDiffuseCoefficients[n].xyz\nvec3 G=(c(0)+fV.y*((c(1)+c(4)*fV.x)+c(5)*fV.z))+fV.x*(c(3)+c(7)*fV.z)+c(2)*fV.z;\n#undef c\nvec3 sqr=fV*fV;G+=uDiffuseCoefficients[6].xyz*(3.0*sqr.z-1.0);G+=uDiffuseCoefficients[8].xyz*(sqr.x-sqr.y);return G;}void fW(inout vec3 fX,inout vec3 fY,inout vec3 fZ,vec3 fV){fX=uDiffuseCoefficients[0].xyz;fY=uDiffuseCoefficients[1].xyz*fV.y;fY+=uDiffuseCoefficients[2].xyz*fV.z;fY+=uDiffuseCoefficients[3].xyz*fV.x;vec3 swz=fV.yyz*fV.xzx;fZ=uDiffuseCoefficients[4].xyz*swz.x;fZ+=uDiffuseCoefficients[5].xyz*swz.y;fZ+=uDiffuseCoefficients[7].xyz*swz.z;vec3 sqr=fV*fV;fZ+=uDiffuseCoefficients[6].xyz*(3.0*sqr.z-1.0);fZ+=uDiffuseCoefficients[8].xyz*(sqr.x-sqr.y);}vec3 hc(vec3 fX,vec3 fY,vec3 fZ,vec3 hd,float fH){hd=mix(vec3(1.0),hd,fH);return(fX+fY*hd.x)+fZ*hd.z;}vec3 he(vec3 fX,vec3 fY,vec3 fZ,vec3 hd,vec3 hf){vec3 hh=mix(vec3(1.0),hd.yyy,hf);vec3 hi=mix(vec3(1.0),hd.zzz,hf);return(fX+fY*hh)+fZ*hi;}vec3 em(vec3 fV,float dQ){fV/=dot(vec3(1.0),abs(fV));vec2 hj=abs(fV.zx)-vec2(1.0,1.0);vec2 hk=vec2(fV.x<0.0?hj.x:-hj.x,fV.z<0.0?hj.y:-hj.y);vec2 hl=(fV.y<0.0)?hk:fV.xz;hl=vec2(0.5*(254.0/256.0),0.125*0.5*(254.0/256.0))*hl+vec2(0.5,0.125*0.5);float hm=fract(7.0*dQ);hl.y+=0.125*(7.0*dQ-hm);vec2 hn=hl+vec2(0.0,0.125);vec4 ho=mix(texture2D(tSkySpecular,hl),texture2D(tSkySpecular,hn),hm);vec3 r=ho.xyz*(7.0*ho.w);return r*r;}float eu(vec3 fV,vec3 hu){float hv=dot(fV,hu);hv=saturate(1.0+uHorizonOcclude*hv);return hv*hv;}",
    "matmicrofiber.glsl": "\n#ifdef MICROFIBER\nuniform vec4 uTexRangeFuzz;uniform vec4 uFresnelColor;uniform float uFresnelIntegral;uniform float uFresnelOcc;uniform float uFresnelGlossMask;struct ed{vec3 eh;vec3 eQ;vec3 hA;vec3 hB;vec3 hC;};void ef(out ed s,vec3 dI){s.eh=s.eQ=ej(dI);s.hA=vec3(0.0);s.hB=uFresnelColor.rgb;s.hC=uFresnelColor.aaa*vec3(1.0,0.5,0.25);\n#ifndef MICROFIBER_NO_FUZZ_TEX\nvec4 m=dM(d,uTexRangeFuzz);s.hB*=dG(m.rgb);\n#endif\n}void eP(inout ed s,float hD,vec3 eK,vec3 dI,vec3 eM){float fF=dot(eK,dI);float eQ=saturate((1.0/3.1415926)*fF);float hE=fM(fF,s.hC.z);\n#ifdef SHADOW_COUNT\neQ*=hD;float hF=mix(1.0,hD,uFresnelOcc);float hA=hE*hF;\n#else \nfloat hA=hE;\n#endif\ns.hA=hA*eM+s.hA;s.eQ=eQ*eM+s.eQ;}void ff(out vec3 ei,out vec3 diff_extra,inout ed s,vec3 dO,vec3 dI,float dQ){s.hA*=uFresnelIntegral;float fT=dot(dO,dI);vec2 hG=fS(vec2(fT,fT),s.hC.xy);s.hA=s.eh*hG.x+(s.hA*hG.y);s.hA*=s.hB;float hH=saturate(1.0+-uFresnelGlossMask*dQ);s.hA*=hH*hH;ei=s.eQ;diff_extra=s.hA;}\n#endif\n",
    "matsampling.glsl": "vec3 dG(vec3 c){return c*c;}vec3 dJ(vec3 n){vec3 hI=dA;vec3 hJ=dB;vec3 hK=gl_FrontFacing?dC:-dC;\n#ifdef TSPACE_RENORMALIZE\nhK=normalize(hK);\n#endif\n#ifdef TSPACE_ORTHOGONALIZE\nhI-=dot(hI,hK)*hK;\n#endif\n#ifdef TSPACE_RENORMALIZE\nhI=normalize(hI);\n#endif\n#ifdef TSPACE_ORTHOGONALIZE\nhJ=(hJ-dot(hJ,hK)*hK)-dot(hJ,hI)*hI;\n#endif\n#ifdef TSPACE_RENORMALIZE\nhJ=normalize(hJ);\n#endif\n#ifdef TSPACE_COMPUTE_BITANGENT\nvec3 hL=cross(hK,hI);hJ=dot(hL,hJ)<0.0?-hL:hL;\n#endif\nn=2.0*n-vec3(1.0);return normalize(hI*n.x+hJ*n.y+hK*n.z);}vec3 dL(vec3 t){vec3 hK=gl_FrontFacing?dC:-dC;return normalize(dA*t.x+dB*t.y+hK*t.z);}vec4 dM(vec2 hM,vec4 hN){\n#if GL_OES_standard_derivatives\nvec2 hO=fract(hM);vec2 hP=fwidth(hO);float hQ=(hP.x+hP.y)>0.5?-6.0:0.0;return texture2D(tExtras,hO*hN.xy+hN.zw,hQ);\n#else\nreturn texture2D(tExtras,fract(hM)*hN.xy+hN.zw);\n#endif\n}vec3 hR(sampler2D hS,vec2 hT,float hU){vec3 n=texture2D(hS,hT,hU*2.5).xyz;return dJ(n);}",
    "matshadows.glsl": "\n#ifdef SHADOW_COUNT\n#ifdef MOBILE\n#define SHADOW_KERNEL (4.0/1536.0)\n#else\n#define SHADOW_KERNEL (4.0/2048.0)\n#endif\nhighp vec4 h(highp mat4 i,highp vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}uniform sampler2D tDepth0;\n#if SHADOW_COUNT > 1\nuniform sampler2D tDepth1;\n#if SHADOW_COUNT > 2\nuniform sampler2D tDepth2;\n#endif\n#endif\nuniform highp vec2 uShadowKernelRotation;uniform highp vec2 uShadowMapSize;uniform highp mat4 uShadowMatrices[SHADOW_COUNT];uniform highp vec4 uShadowTexelPadProjections[SHADOW_COUNT];\n#ifndef MOBILE\nuniform highp mat4 uInvShadowMatrices[SHADOW_COUNT];\n#endif\nhighp float hV(highp vec3 G){\n#ifdef SHADOW_NATIVE_DEPTH\nreturn G.x;\n#else\nreturn(G.x+G.y*(1.0/255.0))+G.z*(1.0/65025.0);\n#endif\n}\n#ifndef SHADOW_COMPARE\n#define SHADOW_COMPARE(a,b) ((a) < (b) ? 1.0 : 0.0)\n#endif\n#ifndef SHADOW_CLIP\n#define SHADOW_CLIP(c,v) v\n#endif\nfloat hW(sampler2D hX,highp vec2 hM,highp float H){\n#ifndef MOBILE\nhighp vec2 c=hM*uShadowMapSize.x;highp vec2 a=floor(c)*uShadowMapSize.y,b=ceil(c)*uShadowMapSize.y;highp vec4 eH;eH.x=hV(texture2D(hX,a).xyz);eH.y=hV(texture2D(hX,vec2(b.x,a.y)).xyz);eH.z=hV(texture2D(hX,vec2(a.x,b.y)).xyz);eH.w=hV(texture2D(hX,b).xyz);highp vec4 hY;hY.x=SHADOW_COMPARE(H,eH.x);hY.y=SHADOW_COMPARE(H,eH.y);hY.z=SHADOW_COMPARE(H,eH.z);hY.w=SHADOW_COMPARE(H,eH.w);highp vec2 w=c-a*uShadowMapSize.x;vec2 s=(w.y*hY.zw+hY.xy)-w.y*hY.xy;return(w.x*s.y+s.x)-w.x*s.x;\n#else\nhighp float G=hV(texture2D(hX,hM.xy).xyz);return SHADOW_COMPARE(H,G);\n#endif\n}highp float hZ(sampler2D hX,highp vec3 hM,float ic){highp vec2 l=uShadowKernelRotation*ic;float s;s=hW(hX,hM.xy+l,hM.z);s+=hW(hX,hM.xy-l,hM.z);s+=hW(hX,hM.xy+vec2(-l.y,l.x),hM.z);s+=hW(hX,hM.xy+vec2(l.y,-l.x),hM.z);s*=0.25;return s*s;}struct eC{float eO[LIGHT_COUNT];};void eE(out eC ss,float ic){highp vec3 id[SHADOW_COUNT];vec3 hK=gl_FrontFacing?dC:-dC;for(int k=0;k<SHADOW_COUNT;++k){vec4 ie=uShadowTexelPadProjections[k];float ih=ie.x*dv.x+(ie.y*dv.y+(ie.z*dv.z+ie.w));\n#ifdef MOBILE\nih*=.001+ic;\n#else\nih*=.0005+0.5*ic;\n#endif\nhighp vec4 ii=h(uShadowMatrices[k],dv+ih*hK);id[k]=ii.xyz/ii.w;}float m;\n#if SHADOW_COUNT > 0\nm=hZ(tDepth0,id[0],ic);ss.eO[0]=SHADOW_CLIP(id[0].xy,m);\n#endif\n#if SHADOW_COUNT > 1\nm=hZ(tDepth1,id[1],ic);ss.eO[1]=SHADOW_CLIP(id[1].xy,m);\n#endif\n#if SHADOW_COUNT > 2\nm=hZ(tDepth2,id[2],ic);ss.eO[2]=SHADOW_CLIP(id[2].xy,m);\n#endif\nfor(int k=SHADOW_COUNT;k<LIGHT_COUNT;++k){ss.eO[k]=1.0;}}struct eG{highp float eH[LIGHT_COUNT];};\n#ifdef MOBILE\nvoid eJ(out eG ss,float ic){for(int k=0;k<LIGHT_COUNT;++k){ss.eH[k]=1.0;}}\n#else\nhighp vec4 ij(sampler2D hX,highp vec2 hM,highp mat4 ik){highp vec4 E;E.xy=hM;\n#ifndef MOBILE\nhighp vec2 c=hM*uShadowMapSize.x;highp vec2 a=floor(c)*uShadowMapSize.y,b=ceil(c)*uShadowMapSize.y;highp vec4 hY;hY.x=hV(texture2D(hX,a).xyz);hY.y=hV(texture2D(hX,vec2(b.x,a.y)).xyz);hY.z=hV(texture2D(hX,vec2(a.x,b.y)).xyz);hY.w=hV(texture2D(hX,b).xyz);highp vec2 w=c-a*uShadowMapSize.x;vec2 s=(w.y*hY.zw+hY.xy)-w.y*hY.xy;E.z=(w.x*s.y+s.x)-w.x*s.x;\n#else \nE.z=hV(texture2D(hX,hM.xy).xyz);\n#endif\nE=h(ik,E.xyz);E.xyz/=E.w;return E;}void eJ(out eG ss,float ic){highp vec3 il[SHADOW_COUNT];vec3 hK=gl_FrontFacing?dC:-dC;hK*=0.6;for(int k=0;k<SHADOW_COUNT;++k){vec4 ie=uShadowTexelPadProjections[k];float ih=ie.x*dv.x+(ie.y*dv.y+(ie.z*dv.z+ie.w));\n#ifdef MOBILE\nih*=.001+ic;\n#else\nih*=.0005+0.5*ic;\n#endif\nhighp vec4 ii=h(uShadowMatrices[k],dv-ih*hK);il[k]=ii.xyz/ii.w;}highp vec4 im;\n#if SHADOW_COUNT > 0\nim=ij(tDepth0,il[0].xy,uInvShadowMatrices[0]);ss.eH[0]=length(dv.xyz-im.xyz);\n#endif\n#if SHADOW_COUNT > 1\nim=ij(tDepth1,il[1].xy,uInvShadowMatrices[1]);ss.eH[1]=length(dv.xyz-im.xyz);\n#endif\n#if SHADOW_COUNT > 2\nim=ij(tDepth2,il[2].xy,uInvShadowMatrices[2]);ss.eH[2]=length(dv.xyz-im.xyz);\n#endif\nfor(int k=SHADOW_COUNT;k<LIGHT_COUNT;++k){ss.eH[k]=1.0;}}\n#endif\n#endif\n",
    "matskin.glsl": "\n#ifdef SKIN\n#ifndef SKIN_NO_SUBDERMIS_TEX\nuniform vec4 uTexRangeSubdermis;\n#endif\n#ifndef SKIN_NO_TRANSLUCENCY_TEX\nuniform vec4 uTexRangeTranslucency;\n#endif\n#ifndef SKIN_NO_FUZZ_TEX\nuniform vec4 uTexRangeFuzz;\n#endif\nuniform vec4 uTransColor;uniform vec4 uFresnelColor;uniform vec3 uSubdermisColor;uniform float uTransScatter;uniform float uFresnelOcc;uniform float uFresnelGlossMask;uniform float uTransSky;uniform float uFresnelIntegral;uniform float uTransIntegral;uniform float uSkinTransDepth;uniform float uSkinShadowBlur;uniform float uNormalSmooth;struct dX{vec3 io;vec3 iu,iv,iA,hA;vec3 ec,eh,iB;vec3 iC;vec3 iD;vec3 iE;vec3 iF;float iG;float iH;float iI;float eF;};void dZ(out dX s){vec4 m;\n#ifdef SKIN_NO_SUBDERMIS_TEX\ns.io=uSubdermisColor;s.iI=1.0;\n#else \nm=dM(d,uTexRangeSubdermis);s.io=dG(m.xyz);s.iI=m.w*m.w;\n#endif\ns.iF=uTransColor.rgb;s.iG=uTransScatter;\n#ifdef SKIN_VERSION_1\ns.eF=uSkinShadowBlur*s.iI;\n#else \ns.iH=max(max(s.iF.r,s.iF.g),s.iF.b)*uTransColor.a;float iJ=max(s.io.r,max(s.io.g,s.io.b));iJ=1.0-iJ;iJ*=iJ;iJ*=iJ;iJ*=iJ;iJ=1.0-(iJ*iJ);s.iI*=iJ;s.eF=uSkinShadowBlur*s.iI*dot(s.io.rgb,vec3(0.333,0.334,0.333));\n#endif\n#ifndef SKIN_NO_TRANSLUCENCY_TEX\nm=dM(d,uTexRangeTranslucency);s.iF*=dG(m.xyz);\n#endif\ns.iC=hR(tNormal,d,uNormalSmooth*s.iI);vec3 iK,iL,iM;fW(iK,iL,iM,s.iC);s.eh=s.iu=iK+iL+iM;\n#ifdef SKIN_VERSION_1 \ns.ec=he(iK,iL,iM,vec3(1.0,0.6667,0.25),s.io);\n#else\ns.ec=he(iK,iL,iM,vec3(1.0,0.6667,0.25),s.io*0.2+vec3(0.1));\n#endif\n#ifdef SKIN_VERSION_1\nvec3 iN,iO,iP;fW(iN,iO,iP,-s.iC);s.iB=hc(iN,iO,iP,vec3(1.0,0.4444,0.0625),s.iG);s.iB*=uTransSky;\n#else \ns.iB=vec3(0.0);\n#endif\ns.iv=s.iA=s.hA=vec3(0.0);s.io*=0.5;s.iG*=0.5;s.iD=uFresnelColor.rgb;s.iE=uFresnelColor.aaa*vec3(1.0,0.5,0.25);\n#ifndef SKIN_NO_FUZZ_TEX\nm=dM(d,uTexRangeFuzz);s.iD*=dG(m.rgb);\n#endif\n}void eN(inout dX s,float iQ,float iR,vec3 eK,vec3 dI,vec3 eM){float fF=dot(eK,dI);float fG=dot(eK,s.iC);float eQ=saturate((1.0/3.1415926)*fF);float hD=iQ*iQ;hD*=hD;hD=saturate(6.0*hD);\n#ifdef SKIN_VERSION_1 \nvec3 iS=fN(fG,s.io);\n#else \nvec3 iS=fE(fF,fG,s.io);\n#endif\nfloat iT=fM(-fG,s.iG);vec3 iA=vec3(iT*iT);\n#ifdef SKIN_VERSION_1\n#ifdef SHADOW_COUNT\nvec3 iU=vec3(iQ);float iV=saturate(hD-2.0*(iQ*iQ));iU+=iV*s.io;float iW=iQ;\n#endif\n#else\n#ifdef SHADOW_COUNT\nvec3 iU;highp vec3 iX=(0.995*s.io)+vec3(0.005,0.005,0.005);highp vec3 iY=vec3(1.0)-iX;iX=mix(iX,iY,iQ);float iZ=sqrt(iQ);vec3 jc=2.0*vec3(1.0-iZ);iZ=1.0-iZ;iZ=(1.0-iZ*iZ);iU=saturate(pow(iX*iZ,jc));highp float jd=0.35/(uSkinTransDepth+0.001);highp float je=saturate(iR*jd);je=saturate(1.0-je);je*=je;highp vec3 jf=vec3((-3.0*je)+3.15);highp vec3 jh=(0.9975*s.iF)+vec3(0.0025,0.0025,0.0025);highp float iJ=saturate(10.0*dot(jh,jh));vec3 iW=pow(jh*je,jf)*iJ;\n#else \niA=vec3(0.0);\n#endif\n#endif\nfloat hE=fM(fG,s.iE.z);\n#ifdef SHADOW_COUNT\nvec3 hF=mix(vec3(1.0),iU,uFresnelOcc);vec3 hA=hE*hF;\n#else\nvec3 hA=vec3(hE);\n#endif\n#ifdef SHADOW_COUNT\niS*=iU;eQ*=hD;iA*=iW;\n#endif\ns.hA=hA*eM+s.hA;s.iA=iA*eM+s.iA;s.iv=iS*eM+s.iv;s.iu=eQ*eM+s.iu;}void fe(out vec3 ei,out vec3 diff_extra,inout dX s,vec3 dO,vec3 dI,float dQ){s.hA*=uFresnelIntegral;float fT=dot(dO,dI);vec2 hG=fS(vec2(fT,fT),s.iE.xy);s.hA=s.eh*hG.x+(s.hA*hG.y);s.hA*=s.iD;float hH=saturate(1.0+-uFresnelGlossMask*dQ);s.hA*=hH*hH;s.iA=s.iA*uTransIntegral;\n#ifdef SKIN_VERSION_1\ns.iv=(s.iv*fP(s.io))+s.ec;\n#else\ns.iv=(s.iv*fL(s.io))+s.ec;\n#endif\nei=mix(s.iu,s.iv,s.iI);\n#ifdef SKIN_VERSION_1\ns.iA=(s.iA+s.iB)*s.iF;diff_extra=(s.hA+s.iA)*s.iI;\n#else\nei+=s.iA*s.iH;diff_extra=s.hA*s.iI;\n#endif\n}\n#endif\n",
    "matstrips.glsl": "\n#ifdef STRIPVIEW\nuniform float uStrips[5];uniform vec2 uStripRes;struct dT{float iJ[5];float bg;};void dV(out dT ji,inout float dQ,inout vec3 dP){highp vec2 hM=gl_FragCoord.xy*uStripRes-vec2(1.0,1.0);hM.x+=0.25*hM.y;ji.iJ[0]=step(hM.x,uStrips[0]);ji.iJ[1]=step(hM.x,uStrips[1]);ji.iJ[2]=step(hM.x,uStrips[2]);ji.iJ[3]=step(hM.x,uStrips[3]);ji.iJ[4]=step(hM.x,uStrips[4]);ji.bg=1.0-ji.iJ[4];ji.iJ[4]-=ji.iJ[3];ji.iJ[3]-=ji.iJ[2];ji.iJ[2]-=ji.iJ[1];ji.iJ[1]-=ji.iJ[0];bool jj=ji.iJ[4]>0.0;dQ=jj?0.5:dQ;dP=jj?vec3(0.1):dP;}vec3 fm(dT ji,vec3 dI,vec3 dF,vec3 dP,float dQ,vec3 ei,vec3 el,vec3 jk){return ji.iJ[0]*(dI*0.5+vec3(0.5))+ji.iJ[1]*dF+ji.iJ[2]*dP+vec3(ji.iJ[3]*dQ)+ji.iJ[4]*(vec3(0.12)+0.3*ei+el)+ji.bg*jk;}\n#endif\n",
    "matvert.glsl": "precision highp float;uniform mat4 uModelViewProjectionMatrix;uniform mat4 uSkyMatrix;uniform vec2 uUVOffset;attribute vec3 vPosition;attribute vec2 vTexCoord;attribute vec2 vTangent;attribute vec2 vBitangent;attribute vec2 vNormal;\n#ifdef VERTEX_COLOR\nattribute vec4 vColor;\n#endif\n#ifdef TEXCOORD_SECONDARY\nattribute vec2 vTexCoord2;\n#endif\nvarying highp vec3 dv;varying mediump vec2 d;varying mediump vec3 dA;varying mediump vec3 dB;varying mediump vec3 dC;\n#ifdef VERTEX_COLOR\nvarying lowp vec4 dD;\n#endif\n#ifdef TEXCOORD_SECONDARY\nvarying mediump vec2 dE;\n#endif\nvec3 jl(vec2 v){bool jm=(v.y>(32767.1/65535.0));v.y=jm?(v.y-(32768.0/65535.0)):v.y;vec3 r;r.xy=(2.0*65535.0/32767.0)*v-vec2(1.0);r.z=sqrt(clamp(1.0-dot(r.xy,r.xy),0.0,1.0));r.z=jm?-r.z:r.z;return r;}vec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}vec3 u(mat4 i,vec3 v){return i[0].xyz*v.x+i[1].xyz*v.y+i[2].xyz*v.z;}void main(void){gl_Position=h(uModelViewProjectionMatrix,vPosition.xyz);d=vTexCoord+uUVOffset;dA=u(uSkyMatrix,jl(vTangent));dB=u(uSkyMatrix,jl(vBitangent));dC=u(uSkyMatrix,jl(vNormal));dv=h(uSkyMatrix,vPosition.xyz).xyz;\n#ifdef VERTEX_COLOR\ndD=vColor;\n#endif\n#ifdef TEXCOORD_SECONDARY\ndE=vTexCoord2;\n#endif\n}",
    "postaa.glsl": "precision mediump float;uniform sampler2D tInput;varying vec2 j;void main(void){gl_FragColor=texture2D(tInput,j);}",
    "postfrag.glsl": "precision mediump float;uniform sampler2D tInput;\n#ifdef BLOOM\nuniform sampler2D tBloom;\n#endif\n#ifdef GRAIN\nuniform sampler2D tGrain;\n#endif\n#ifdef COLOR_LUT\nuniform sampler2D tLUT;\n#endif\nuniform vec3 uScale;uniform vec3 uBias;uniform vec3 uSaturation;uniform vec4 uSharpenKernel;uniform vec3 uSharpness;uniform vec3 uBloomColor;uniform vec4 uVignetteAspect;uniform vec4 uVignette;uniform vec4 uGrainCoord;uniform vec2 uGrainScaleBias;varying vec2 j;vec3 jn(vec3 c){vec3 jo=sqrt(c);return(jo-jo*c)+c*(0.4672*c+vec3(0.5328));}void main(void){vec4 ju=texture2D(tInput,j);vec3 c=ju.xyz;\n#ifdef SHARPEN\nvec3 hY=texture2D(tInput,j+uSharpenKernel.xy).xyz;hY+=texture2D(tInput,j-uSharpenKernel.xy).xyz;hY+=texture2D(tInput,j+uSharpenKernel.zw).xyz;hY+=texture2D(tInput,j-uSharpenKernel.zw).xyz;vec3 jv=uSharpness.x*c-uSharpness.y*hY;c+=clamp(jv,-uSharpness.z,uSharpness.z);\n#endif\n#ifdef BLOOM\nc+=uBloomColor*texture2D(tBloom,j).xyz;\n#endif\n#ifdef VIGNETTE\nvec2 jA=j*uVignetteAspect.xy-uVignetteAspect.zw;vec3 v=clamp(vec3(1.0,1.0,1.0)-uVignette.xyz*dot(jA,jA),0.0,1.0);vec3 jB=v*v;jB*=v;c*=mix(v,jB,uVignette.w);\n#endif\n#ifdef SATURATION\nfloat gray=dot(c,vec3(0.3,0.59,0.11));c=mix(vec3(gray,gray,gray),c,uSaturation);\n#endif\n#ifdef CONTRAST\nc=c*uScale+uBias;\n#endif\n#ifdef GRAIN\nfloat jC=uGrainScaleBias.x*texture2D(tGrain,j*uGrainCoord.xy+uGrainCoord.zw).x+uGrainScaleBias.y;c+=c*jC;\n#endif\n#ifdef REINHARD\n{c*=1.8;float jD=dot(c,vec3(0.3333));c=clamp(c/(1.0+jD),0.0,1.0);}\n#elif defined(HEJL)\n{const highp float jE=0.22,jF=0.3,jG=.1,eY=0.2,jH=.01,jI=0.3;const highp float jJ=1.25;highp vec3 eT=max(vec3(0.0),c-vec3(.004));c=(eT*((jJ*jE)*eT+jJ*vec3(jG*jF,jG*jF,jG*jF))+jJ*vec3(eY*jH,eY*jH,eY*jH))/(eT*(jE*eT+vec3(jF,jF,jF))+vec3(eY*jI,eY*jI,eY*jI))-jJ*vec3(jH/jI,jH/jI,jH/jI);}\n#elif defined(ACES)\n{vec3 a=c*(c+0.0245786)-0.000090537;vec3 b=c*(0.983729*c+0.4329510)+0.238081;c=a/b;}\n#endif\n#ifdef COLOR_LUT\nc=clamp(c,0.0,1.0);c=(255.0/256.0)*c+vec3(0.5/256.0);c.x=texture2D(tLUT,c.xx).x;c.y=texture2D(tLUT,c.yy).y;c.z=texture2D(tLUT,c.zz).z;c*=c;\n#endif\ngl_FragColor.xyz=jn(c);gl_FragColor.w=ju.w;}",
    "postvert.glsl": "precision highp float;attribute vec2 vCoord;varying vec2 j;void main(void){j=vCoord;gl_Position.xy=2.0*vCoord-vec2(1.0,1.0);gl_Position.zw=vec2(0.0,1.0);}",
    "shadowfloorfrag.glsl": "precision mediump float;varying highp vec3 dv;varying mediump vec2 jK;varying mediump vec3 dC;uniform vec3 uShadowCatcherParams;\n#ifdef LIGHT_COUNT\nuniform vec4 uLightPositions[LIGHT_COUNT];uniform vec3 uLightDirections[LIGHT_COUNT];uniform vec3 uLightColors[LIGHT_COUNT];uniform vec3 uLightParams[LIGHT_COUNT];uniform vec3 uLightSpot[LIGHT_COUNT];\n#endif\n#define saturate(x) clamp( x, 0.0, 1.0 )\n#define SHADOW_COMPARE(a,b) ((a) < (b) || (b) >= 1.0 ? 1.0 : 0.0)\n#define SHADOW_CLIP(c,v) ((c.x<0.0 || c.x>1.0 || c.y<0.0 || c.y>1.0) ? 1.0 : v)\n#include <matshadows.glsl>\nvoid main(void){eC eD;eE(eD,SHADOW_KERNEL);vec3 jL=vec3(0.0,0.0,0.0);vec3 jM=vec3(0.0,0.0,0.0);for(int k=0;k<SHADOW_COUNT;++k){vec3 eK=uLightPositions[k].xyz-dv*uLightPositions[k].w;float eL=inversesqrt(dot(eK,eK));eK*=eL;float a=saturate(uLightParams[k].z/eL);a=1.0+a*(uLightParams[k].x+uLightParams[k].y*a);float s=saturate(dot(eK,uLightDirections[k]));s=saturate(uLightSpot[k].y-uLightSpot[k].z*(1.0-s*s));vec3 jN=mix(uLightColors[k].xyz,vec3(1.0,1.0,1.0),uShadowCatcherParams.x);vec3 jO=(a*s)*jN;jO*=saturate(dot(eK,dC));jM+=jO;jL+=jO*eD.eO[k];}float jP=1.0e-4;vec3 r=(jL+jP)/(jM+jP);float jQ=saturate(dot(jK,jK))*uShadowCatcherParams.z;r=mix(r,vec3(1.0,1.0,1.0),jQ);r=mix(vec3(1.0,1.0,1.0),r,uShadowCatcherParams.y);gl_FragColor.xyz=r;gl_FragColor.w=1.0;}",
    "shadowfloorvert.glsl": "precision highp float;uniform mat4 uModelViewProjectionMatrix;uniform mat4 uModelSkyMatrix;uniform float uScale;attribute vec3 vPosition;varying highp vec3 dv;varying mediump vec2 jK;varying mediump vec3 dC;vec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}void main(void){jK=vPosition.xz;dC=normalize(uModelSkyMatrix[1].xyz);dv=h(uModelSkyMatrix,vPosition).xyz;gl_Position=h(uModelViewProjectionMatrix,vPosition);}",
    "shadowfrag.glsl": "precision highp float;varying vec2 jR;\n#ifdef ALPHA_TEST\nvarying mediump vec2 d;uniform sampler2D tAlbedo;\n#endif\nvec3 jS(float v){vec4 jT=vec4(1.0,255.0,65025.0,16581375.0)*v;jT=fract(jT);jT.xyz-=jT.yzw*(1.0/255.0);return jT.xyz;}void main(void){\n#ifdef ALPHA_TEST\nfloat e=texture2D(tAlbedo,d).a;if(e<0.5){discard;}\n#endif\n#ifdef SHADOW_NATIVE_DEPTH\ngl_FragColor.xyz=vec3(0.0,0.0,0.0);\n#else\ngl_FragColor.xyz=jS((jR.x/jR.y)*0.5+0.5);\n#endif\ngl_FragColor.w=0.0;}",
    "shadowvert.glsl": "precision highp float;attribute vec3 vPosition;attribute vec2 vTexCoord;uniform mat4 uMeshTransform;uniform mat4 uViewProjection;varying vec2 jR;\n#ifdef ALPHA_TEST\nvarying mediump vec2 d;uniform vec2 uUVOffset;\n#endif\nvec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}void main(void){vec3 p=h(uMeshTransform,vPosition).xyz;gl_Position=h(uViewProjection,p);jR=gl_Position.zw;\n#ifdef ALPHA_TEST\nd=vTexCoord+uUVOffset;\n#endif\n}",
    "sky.glsl": "precision highp float;uniform sampler2D tSkyTexture;uniform float uAlpha;varying vec2 d;void main(void){vec3 r=texture2D(tSkyTexture,d).xyz;gl_FragColor.xyz=r*r;gl_FragColor.w=uAlpha;}",
    "skySH.glsl": "precision mediump float;uniform vec4 uSkyCoefficients[9];uniform float uAlpha;varying vec3 jU;void main(void){vec3 G=normalize(jU);vec3 r=uSkyCoefficients[0].xyz;r+=uSkyCoefficients[1].xyz*G.y;r+=uSkyCoefficients[2].xyz*G.z;r+=uSkyCoefficients[3].xyz*G.x;vec3 swz=G.yyz*G.xzx;r+=uSkyCoefficients[4].xyz*swz.x;r+=uSkyCoefficients[5].xyz*swz.y;r+=uSkyCoefficients[7].xyz*swz.z;vec3 sqr=G*G;r+=uSkyCoefficients[6].xyz*(3.0*sqr.z-1.0);r+=uSkyCoefficients[8].xyz*(sqr.x-sqr.y);gl_FragColor.xyz=r;gl_FragColor.w=uAlpha;}",
    "skyvert.glsl": "precision highp float;uniform mat4 uInverseSkyMatrix;uniform mat4 uViewProjection;attribute vec3 vPosition;attribute vec2 vTexCoord;\n#if SKYMODE == 3\nvarying vec3 jU;\n#else\nvarying vec2 d;\n#endif\nvec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}vec4 u(mat4 i,vec3 v){return i[0]*v.x+i[1]*v.y+i[2]*v.z;}void main(void){vec3 p=h(uInverseSkyMatrix,vPosition).xyz;gl_Position=u(uViewProjection,p);float jV=1.0/65535.0;if(abs(gl_Position.w)<jV){gl_Position.w=jV;}\n#if SKYMODE == 3\njU=vPosition;jU.xy+=1e-20*vTexCoord;\n#else\nd=vTexCoord;\n#endif\n}",
    "wirefrag.glsl": "precision highp float;uniform vec4 uStripParams;void main(void){vec2 c=gl_FragCoord.xy*uStripParams.xy-vec2(1.0,1.0);c.x+=0.25*c.y;float a=c.x<uStripParams.z?0.0:0.9;a=c.x<uStripParams.w?a:0.0;gl_FragColor=vec4(0.0,0.0,0.0,a);}",
    "wirevert.glsl": "precision highp float;uniform mat4 uModelViewProjectionMatrix;attribute vec3 vPosition;vec4 h(mat4 i,vec3 p){return i[0]*p.x+(i[1]*p.y+(i[2]*p.z+i[3]));}void main(void){gl_Position=h(uModelViewProjectionMatrix,vPosition);gl_Position.z+=-0.00005*gl_Position.w;}",
    nil: ""
};